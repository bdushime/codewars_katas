codewars katas:

Not very secure
     function alphanumeric(string) {
  if (string.length === 0) return false;

  for (let i = 0; i < string.length; i++) {
    const c = string[i];
    let upper = false;
    let lower = false;
    let digit = false;

    const code = c.charCodeAt(0);

    if (code >= 65 && code <= 90) {
      upper = true;
    } else if (code >= 97 && code <= 122) {
      lower = true;
    } else if (code >= 48 && code <= 57) {
      digit = true;
    }

    if (!upper && !lower && !digit) {
      return false;
    }
  }
  return true;
}



Area of an arrow

    function arrowArea(a, b) {
  if (a <= 0 || b <= 0 || !Number.isInteger(a) || !Number.isInteger(b)) {
    throw new Error("a and b must be positive integers");
  }
  return (1 / 4) * a * b;
}






export function countBits(n: number): number {
    // Program Me
    let bin:string= n.toString(2);
    let count:number=0;

    for(let i=0;i<=bin.length;i++){
       if(bin[i] === '1'){
          count++;
       }
    }
    return count
    
  }










How good are you really?

  export function betterThanAverage(classPoints: number[], yourPoints: number) : boolean {
 let avg= classPoints.reduce((acc,curr)=>acc+curr,0)/classPoints.length;

    if(avg > yourPoints){
     return false;
     }

  return true;
}


  

Sum of Digits / Digital Root

  export const digitalRoot = (n:number):number => {
  // your code here
  while (n >= 10) {
        n = n.toString()
            .split('')
            .reduce((sum: number, digit: string) => sum + parseInt(digit), 0);
    }
    return n;
};


How good are you really?

    export function betterThanAverage(classPoints: number[], yourPoints: number) : boolean {
 let avg= classPoints.reduce((acc,curr)=>acc+curr,0)/classPoints.length;

    if(avg > yourPoints){
     return false;
     }

  return true;
}




Multiply:

    export function multiply(a: number, b: number): number {
  return a * b;
}







Count of positives / sum of negatives(Typescript)

 
export function countPositivesSumNegatives(input: number[] | null): number[] {
  if (input === null || input.length === 0) {
    return [];
  }

  const positive = input.filter(num => num > 0).length;
  const negative = input.filter(num => num < 0);
  const sum = negative.reduce((sum, curr) => sum + curr, 0);

  return [positive, sum];
}


Welcome to the City(Typescript)
  export const sayHello = (name: string[], city: string, state: string):string => {
  return `Hello, ${name.join(" ")}! Welcome to ${city}, ${state}!`;
}




Coding Meetup #10 - Higher-Order Functions Series - Create usernames

   function addUsername(list){
    for(let i=0;i<=list.length-1;i++){
        if(list[i].hasOwnProperty('username')=== false){
            let str=list[i].firstName.toLowerCase();
            let str0=list[i].lastName[0].toLowerCase();
            let str1=str + str0;
            const date = new Date();
            const age =list[i].age;
            const year = date.getFullYear();
            let str2=year - age ;
            list[i].username= str1 + str2;
            
        }

    }
    
    return list;
}



function addUsername(list) {
  return list.map(function(x){
      x.username =x.firstName.toLowerCase() + x.lastName[0].toLowerCase() +(date =new Date().getFullYear() - x.age);
      return x;})
}









Coding Meetup #16 - Higher-Order Functions Series - Ask for missing details

    function askForMissingDetails(list) {
  const nullProperties = [];
  const list2= [];
 for(let i=0;i<=list.length-1;i++){
   const currentItem = list[i];
    const nullPropsInThisItem = [];
    
    for(const key in currentItem){
        if(currentItem.hasOwnProperty(key) && currentItem[key] === null){
            nullProperties.push(key);
            currentItem.question=`Hi, could you please provide your ${key}.`;
            list2.push(currentItem);
        }
        
        
    }
  
 }
 
  return list2;
  
}




Convert string to camel case

   function toCamelCase(str){
  let str1='';
  for(let i=0;i<=str.length-1;i++){
    if(str[i]==="_" || str[i]==="-"){
      i++;
      str1+=str[i].toUpperCase();
     
    }else{
      str1 += str[i];
    }
  }
  
  return str1;
  
}

   

Inverting a Hash

  function invertHash(hash) {
  let obj={};
  let entries=Object.entries(hash);
  
  for(let [key,value] of entries){
      obj[value]=key
  }
  
  return obj;
}


Who is the killer?


  function killer(suspectInfo, dead) {
 for(let suspect in suspectInfo){
   if(dead.every(person =>suspectInfo[suspect].includes(person))){
     return suspect;
   }
 }
}




Remove exclamation marks

  function removeExclamationMarks(s) {
  let s1='';
  for(let i=0;i<=s.length-1;i++){
    if(s[i] !== '!'){
      s1 +=s[i];
    }
  }
  return s1;
}











IndexOf Array in Array



function searchArray(arrayToSearch, query) {

  if (!Array.isArray(arrayToSearch)) {
    throw new Error("arrayToSearch must be an array");
  }
  
  
  for (let i = 0; i < arrayToSearch.length; i++) {
    if (!Array.isArray(arrayToSearch[i])) {
      throw new Error("Each element in arrayToSearch must be an array");
    }
    if (arrayToSearch[i].length !== 2) {
      throw new Error("Each sub-array in arrayToSearch must be of length 2");
    }
  }
  
  
  if (!Array.isArray(query)) {
    throw new Error("query must be an array");
  }
  if (query.length !== 2) {
    throw new Error("query must be of length 2");
  }
  
  
  for (let i = 0; i < arrayToSearch.length; i++) {
    if (arrayToSearch[i][0] === query[0] && arrayToSearch[i][1] === query[1]) {
      return i;
    }
  }
  
  
  return -1;
}















Calculating with Functions



 function zero(op) { return op ? op(0) : 0; }
function one(op) { return op ? op(1) : 1; }
function two(op) { return op ? op(2) : 2; }
function three(op) { return op ? op(3) : 3; }
function four(op) { return op ? op(4) : 4; }
function five(op) { return op ? op(5) : 5; }
function six(op) { return op ? op(6) : 6; }
function seven(op) { return op ? op(7) : 7; }
function eight(op) { return op ? op(8) : 8; }
function nine(op) { return op ? op(9) : 9; }

function plus(right) {
    return function(left) {
        return left + right;
    };
}

function minus(right) {
    return function(left) {
        return left - right;
    };
}

function times(right) {
    return function(left) {
        return left * right;
    };
}

function dividedBy(right) {
    return function(left) {
        return Math.floor(left / right);
    };
}









Working with Dictionaries


function infDatabase(range_, str_, val) {
    const [a, b] = range_;
    const validConditions = {
        "equals to": (x) => x === val,
        "higher than": (x) => x > val,
        "lower than": (x) => x < val,
        "higher and equals to": (x) => x >= val,
        "lower and equals to": (x) => x <= val
    };

    if (!validConditions[str_]) return "wrong constraint";

    let numbers = [];
    
    for (let i = a; i <= b; i++) {
        if (validConditions[str_](A001055[i])) {
            numbers.push(i);
        }
    }

    return [numbers.length, numbers];
}








Who is the killer?

   function killer(suspectInfo, dead) {
  for (let suspect in suspectInfo) {
    if (dead.every(person => suspectInfo[suspect].includes(person))) {
      return suspect;
    }
  }
}

   











For UFC Fans (Total Beginners): Conor McGregor vs George Saint Pierre

  function quote(fighter) {
     let name=fighter.toLowerCase().trim();
  
       if(name === 'george saint pierre'){
         return "I am not impressed by your performance.";
  }
  
      return "I'd like to take this chance to apologize.. To absolutely NOBODY!";
};





Recursive Replication

 function replicate(times, number) {
	if (times < 0) return [];
  
  return new Array(times).fill(number);
}





"this" is an other problem


function NamedOne(first,last){
    this.firstName=first;
    this.lastName=last;
    
    Object.defineProperty(this,"fullName",{
        set: function(value){
            var parts=value.split(" ");
            if(parts.length === 2){
                this.firstName = parts[0];
                this.lastName = parts[1];
            }
        },
        get : function(value){
            return `${this.firstName} ${this.lastName}`;
        }
    });
}

















Multiples of 3 and 5 redux

   answer:


       function solution(number){
  // ...
 function sumDivisibleBy(k) {
        let m = Math.floor((number - 1) / k); 
        return k * (m * (m + 1)) / 2;
    }

    return sumDivisibleBy(3) + sumDivisibleBy(5) - sumDivisibleBy(15);
}











Surface Area and Volume of a Box

   answer:


       function getSize(width, height, depth){
   let surfaceArea = 2 * (width * height + width * depth + height * depth);
    let volume = width * height * depth;
    return [surfaceArea, volume];
}







Normalizing Out of Range Array Indexes

    answer:

        function normIndex(array, index){

  if(array.length <= 0){
    return undefined;
  }
  
  index =((index % array.length)+ array.length)%array.length;
  
  return array[index];

}
 










Sum Strings as Numbers


   answer:
        function sumStrings(a,b) { 
 let s1=BigInt(a);
 let s2=BigInt(b);
  
 let sum=s1+s2;
  
  return String(sum);
 
}





Coding Meetup #9 - Higher-Order Functions Series - Is the meetup age-diverse?

 answer:
        function isAgeDiverse(list) {
  let teens = false;     
  let twenties = false;  
  let thirties = false; 
  let forties = false;   
  let fifties = false;   
  let sixties = false;   
  let seventies = false; 
  let eighties = false;  
  let nineties = false;  
  let hundreds = false;  
  
  for (let person of list) {
    const age = person.age;
    
    if (age >= 10 && age < 20) teens = true;
    else if (age >= 20 && age < 30) twenties = true;
    else if (age >= 30 && age < 40) thirties = true;
    else if (age >= 40 && age < 50) forties = true;
    else if (age >= 50 && age < 60) fifties = true;
    else if (age >= 60 && age < 70) sixties = true;
    else if (age >= 70 && age < 80) seventies = true;
    else if (age >= 80 && age < 90) eighties = true;
    else if (age >= 90 && age < 100) nineties = true;
    else if (age >= 100) hundreds = true;
  }

  return teens && twenties && thirties && forties && 
         fifties && sixties && seventies && eighties && 
         nineties && hundreds;
}
     


Coding Meetup #7 - Higher-Order Functions Series - Find the most senior developer


    function findSenior(list) {
  let list1= list.sort((a,b)=>b.age -a.age);
  let maxAge=list1[0].age;
  
  return list1.filter(obj=>obj.age === maxAge);

 
}






Coding Meetup #8 - Higher-Order Functions Series - Will all continents be represented?

   function allContinents(list) {
  return ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania'].every(x => list.some(y => x==y.continent));
}

Coding Meetup #4 - Higher-Order Functions Series - Find the first Python developer

     function getFirstPython(list) {
  // Thank you for checking out my kata :)
  let obj=[];
  let available=false;
  for(let i=0;i<list.length;i++){
    if(list[i].language === 'Python'){
      available=true;
       obj.push(`${list[i].firstName}, ${list[i].country}`);
    }
  }
  return available? String(obj[0]) : "There will be no Python developers";
}









Sum Strings as Numbers

     function sumStrings(a,b) { 
 let s1=BigInt(a);
 let s2=BigInt(b);
  
 let sum=s1+s2;
  
  return String(sum);
 
}








Coding Meetup #3 - Higher-Order Functions Series - Is Ruby coming?

function isRubyComing(list) {
   return list.some((obj)=> obj.language === 'Ruby');
}





Coding Meetup #17 - Higher-Order Functions Series - Sort by programming language
  answer:
       function sortByLanguage(list) {
   return list.sort((a,b) => {
       if(a.language === b.language){
           return a.firstName.localeCompare(b.firstName);
       }
       
       return a.language.localeCompare(b.language);
       
   });
  
}




Is there a vowel in there?:
 answer:
      function isVow(s){

    let arr=s
    let newArr=[];
    
    for(let i=0;i<arr.length;i++){
        if(String.fromCharCode(arr[i]) === 'a' || String.fromCharCode(arr[i]) === 'e' || String.fromCharCode(arr[i]) === 'i' || String.fromCharCode(arr[i]) === 'o' || String.fromCharCode(arr[i])=== 'u'){
            newArr.push(String.fromCharCode(arr[i]));
        }else{
          newArr.push(arr[i])
        }
    }
    return newArr;
    
}


Sum of Cubes:

 answer:

    function sumCubes(n){
  let sum = 0;
  
  for(let i=0;i<=n;i++){
    sum +=i*i*i;
  }
  
  return sum
}


The highest profit wins!

   answer:
       function minMax(arr){
    arr1= arr.sort((a,b)=>a-b);
    
    return [arr1[0],arr1[arr1.length-1]];
}






Balanced Number (Special Numbers Series #1 )

answer:
    function balancedNum(number) {
    let array = number.toString().split('').map(element => Number(element));
    let length = array.length;
    let middleNumber = Math.floor(length / 2);
    let sum1 = 0;
    let sum2 = 0;
    
    if(length <=1){
    return "Balanced";
  }

    if (length % 2 === 0) {
        for (let i = 0; i < middleNumber - 1; i++) {
            sum1 += array[i];
        }
        
        for (let i = middleNumber + 1; i < length; i++) {
            sum2 += array[i];
        }
    } else {
        for (let i = 0; i < middleNumber; i++) {
            sum1 += array[i];
        }
        
        for (let i = middleNumber + 1; i < length; i++) { 
            sum2 += array[i];
        }
    }
    
    return sum1 === sum2 ? "Balanced" : "Not Balanced";
}

console.log(balancedNum(959));





 get ascii value of character

   answer:

       function getASCII(c){
  // ...
  return c.charCodeAt(0);
}

Find the capitals

    answer:


var capitals = function (word) {

   let word1=word;
  let word2=[];
  
  for(let i=0;i<word1.length;i++){
    if(word1.charCodeAt(i) >= 65 && word1.charCodeAt(i) <97){
      word2.push(i);
    }
  }
  
  return word2;
  
};


Convert an array of strings to array of numbers


answer:

function toNumberArray(stringarray){
  return stringarray.map((element)=>Number(element));
}


Summing a number's digits

answer:


function sumDigits(number) {
  let sum =0;
 let num =Math.abs(number);
  while(num > 0){
    sum +=num%10;
    num =Math.floor(num/10)
  }
  
  return sum;
}

find the nth digit

answer:

function findDigit(num, nth = 0) {

 let n=Math.abs(num);
  let digit=0
  let arr=n.toString().split('').map(element=>Number(element));
  
  if(nth > arr.length ){
      return 0;
  }else if(nth.toString().includes('-') || nth === 0){
      return -1;
  }
  
  for(let i=arr.reverse().length -1;i>=0;i--){
      if(nth -1 === i){
          digit =arr[i];
      }
  }
 
  
  
  
  
  return digit;
}


function findDigit(num, nth = 0) {
  let n = Math.abs(num);
  
  if (nth === 0 || nth.toString().includes('-')) {
    return -1;
  }
  
   let totalDigits = Math.floor(Math.log10(n)) + 1;
    if(nth >totalDigits){
        return 0;
    }
  
  
  let digits = 0;
  let currentD = 0;
  let target = -1;
  
   
  while (n > 0) {
    digits = n % 10;
    
    if (currentD === nth - 1) {
      target = digits;
      break;  
    }
    
    n = Math.floor(n / 10);
    currentD++;
  }
  
  return target;
}


console.log(findDigit(-456,4));


Gravity flip
  answer:

const flip=(d, a)=>{ 
    if(d ==='R'){
      return a.sort((a,b)=>(a-b));
    }
    else if(d ==='L'){
           return a.sort((a, b) =>(b-a));
    }
    
}

Is the string uppercase?

answer:
  String.prototype.isUpperCase = function() {
  return this.split('').every((element)=>element.toUpperCase() === element);
  }


Sort array by string length

   answer:

     function sortByLength (array) {
  
  
       return array.sort((a,b)=>a.length-b.length);
}



Plus - minus - plus - plus - ... - Count

answer:

    function catchSignChange(arr) {
    let change=0;
  for(let i=0;i<arr.length;i++){
      if((arr[i-1] >= 0 && arr[i] < 0)||(arr[i-1]<0  && arr[i]>=0)){
          
          change++;
      }
  }
  return change;
}



How many consecutive numbers are needed?

answer:

     function consecutive(array) {
    let arr1=array.sort((a,b)=>a-b);
    let minNumber=arr1[0];
    let maxNumber=arr1[arr1.length-1];
    let arr2=[];
    let count=0;
    
    for(let i=minNumber;i<=maxNumber;i++){
        if(!arr1.includes(i)){
            arr2.push(i);
            count++;
        }
    }
  return count;
}


Reverse the bits in an integer

   answer:

      function reverseBits (n) {
  const bin= n.toString(2).split('').reverse().join('');
  
  return parseInt(bin,2);
}


Cat and Mouse - Easy Version

   answer:


        function catMouse(x){
            let length=x.length -2;

               if(length <=3){
                    return 'Caught!';
                     }
             else{
                  return 'Escaped!';
                }

}


Inspiring Strings

  answer:

        function longestWord(stringOfWords) {
  // Split the input into an array of words
  const words = stringOfWords.split(' ');

  const maxLength = Math.max(...words.map(word => word.length));

  const longestWords = words.filter(word => word.length === maxLength);

  return longestWords[longestWords.length - 1];
}


Throwing Darts


  answer:

        function scoreThrows(radii) {
  // Handle empty array case
  if (radii.length === 0) return 0;
  
  // Map radii to their corresponding points
  let scores = radii.map((radius) => {
    if (radius > 10) {
      return 0;
    } else if (radius <= 10 && radius >= 5) {
      return 5;
    } else {
      return 10;
    }
  });
  
  // Calculate total score
  let totalScore = scores.reduce((sum, score) => sum + score, 0);
  
  let allLessThanFive = radii.every(radius => radius < 5);
  if (allLessThanFive) {
    totalScore += 100;
  }
  
  return totalScore;
}


Find Nearest square number

   answer:


        function nearestSq(n) {
    if (n < 0) {
        throw new Error("Input must be a positive integer.");
    }
    
    const lowerRoot = Math.floor(Math.sqrt(n)); 
    const higherRoot = Math.ceil(Math.sqrt(n)); 
    
    const lowerSquare = lowerRoot * lowerRoot;
    const higherSquare = higherRoot * higherRoot; 
    
    if (Math.abs(n - lowerSquare) <= Math.abs(n - higherSquare)) {
        return lowerSquare;
    } else {
        return higherSquare;
    }
}


Numericals of a String
   answer:

      function numericals(s){
  // Object to track character occurrences
    const charCount = {};
    
    // Use map to transform the string
    return s
        .split('')
        .map(char => {
            // If character hasn't been seen before
            if (charCount[char] === undefined) {
                charCount[char] = 1;
                return '1';
            }
            
            // Increment and return the occurrence count
            charCount[char]++;
            return charCount[char].toString();
        })
        .join('');
    
}


flip the digit in bits:

   answer: 
         function binaryOp(number, v) {
    let nb = number.toString(2); // Convert the number to binary string

    // Ensure v is within bounds
    if (v < 1 || v > nb.length) {
        throw new Error("Invalid position v");
    }

    // Convert the string to an array for easier manipulation
    let binaryArray = nb.split('');

    // Index in the array is v-1 (since v is 1-based)
    let index = nb.length - v; // Adjust for binary order (from right to left)

    // Toggle the bit at the specified index
    binaryArray[index] = binaryArray[index] === '1' ? '0' : '1';

    // Convert back to string and then to integer
    let modifiedBinary = binaryArray.join('');
    return parseInt(modifiedBinary, 2);
}

// Test cases
console.log(binaryOp(15, 4)); // Output: 7
console.log(binaryOp(0, 1));  // Output: 1
console.log(binaryOp(15, 1)); // Output: 14


String subpattern recognition I
 answer:
    function hasSubpattern(string){
let str= string + string;
let trimmed = str.slice(1,-1);
return trimmed.includes(string);
}





